{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getFetchGifs","category","a","url","encodeURI","fetch","fetchGifs","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","substring","GiftGrid","loading","state","setState","useEffect","then","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAgBrC,OACI,sBACIC,SAVW,SAAAC,GACfA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OACpCN,EAAc,MAKlB,SAEI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBgB,SAACP,GAGrBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAY,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DAChBC,EADgB,iDAC8BC,UAAUH,GADxC,+DAEAI,MAAMF,GAFN,cAEhBG,EAFgB,gBAGHA,EAAUC,OAHP,uBAGfC,EAHe,EAGfA,KACDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACrB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QARnB,kBAWfM,GAXe,4CAAD,sDCWVO,EAVM,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE1B,OACI,sBAAKc,UAAU,wCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,EAAMO,UAAU,EAAG,UCmBpBC,EArBE,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDP,SAACA,GAAY,IAAD,EACRd,mBAAS,CAC/BqB,KAAK,GACLc,SAAQ,IAHsB,mBAC3BC,EAD2B,KACpBC,EADoB,KAiBlC,OAXAC,qBAAU,WACLzB,EAAaC,GACLyB,MAAK,SAAAf,GACEa,EAAS,CACLhB,KAAKG,EACLW,SAAQ,SAG7B,CAACrB,IAGGsB,EDdsBI,CAAa1B,GAA9Ba,EAFiB,EAEtBN,KAAac,EAFS,EAETA,QAEpB,OACI,eAAC,WAAD,WACI,oBAAIL,UAAU,wCAAd,SAAuDhB,IACtDqB,GAAS,mBAAGL,UAAU,wCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEcH,EAAOJ,KAAI,SAAAC,GAAG,OACN,cAAC,EAAD,eAEAA,GADKA,EAAIC,aEmB1BgB,EA/BO,WAAM,MAGYzC,mBAAS,CAAC,cAHtB,mBAGjB0C,EAHiB,KAGL3C,EAHK,KASxB,OACI,eAAC,WAAD,WAEI,+CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEO2C,EACMnB,KAAI,SAAAT,GAAQ,OACT,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCpBrC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.597f4ff6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange=(e)=>{\n        //e.prevetDefault();\n       // console.log(e.target.value);//ver el console los datos\n        setInputValue(e.target.value);\n    }\n    const handleSubmit=e=>{\n        e.preventDefault()\n        if(inputValue.trim().length>2){\n            setCategories(cats=>[inputValue, ...cats ]);\n            setInputValue('');\n        }\n\n    }\n    return ( \n        <form \n            onSubmit={handleSubmit}>\n            <input \n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}/>\n        </form>\n     );\n}\n\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired\n}\n \nexport default AddCategory;","export const getFetchGifs=async(category)=>{\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=3s20W7cCMw4hsGD3myivqHobaoz8FzgA`;\n    const fetchGifs=await fetch(url);\n    const {data}=await fetchGifs.json();\n    const gifs=data.map(img=>{\n        return{\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react';\nconst GiftGridItem = ({title, url}) => {\n   // const {url, id, title}=img;\n    return ( \n        <div className=\"card animate__animated animate__pulse\">\n            <img src={url} alt={title}/>\n            <p>{title.substring(0, 12)}</p>\n        </div>\n     );\n}\n \nexport default GiftGridItem;","import React, {Fragment} from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GiftGridItem from './GiftGridItem';\n\nconst GiftGrid = ({category}) => {\n\n    const {data:images, loading}=useFetchGifs(category);\n    \n    return ( \n        <Fragment>\n            <li className=\"card animate__animated animate__pulse\">{category}</li>\n            {loading&&<p className=\"card animate__animated animate__flash\">Loading ...</p>}\n          <div className=\"card-grid\">\n                    {\n                        images.map(img=>(\n                                <GiftGridItem \n                                key={img.id}\n                            {...img}/>\n                        ))\n                    }\n            </div>\n        </Fragment>\n     );\n}\n \nexport default GiftGrid;","import { useState, useEffect } from \"react\"\nimport { getFetchGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs=(category)=>{\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect(()=>{\n         getFetchGifs(category)\n                .then(img=>{\n                        setState({\n                            data:img,\n                            loading:false\n                        });\n                });\n    }, [category]) \n    \n    \n    return state;\n}","import React, { Fragment, useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GiftGrid from './GifGrid';\n\nconst GiftExpertApp = () => {\n\n    //const categories=['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handledAdd=()=>{\n    //     setCategories(['Naruto', ...categories]); //insertar primero en la entrada\n    //     //setCategories(cats=>[...cats, 'Naruto']); //Otra forma de insertar en el estado\n    // }\n    return ( \n        <Fragment>\n            \n            <h2>GiftExpertApp</h2>\n            <hr/>\n            <AddCategory setCategories={setCategories} />\n           {/*<button onClick={handledAdd}>Agregar</button>*/}\n            <h2>\n                {\n                   categories\n                        .map(category =>(\n                            <GiftGrid\n                                key={category}\n                                category={category} />\n                            )\n                        ) \n                }\n            </h2>\n        </Fragment>\n     );\n}\n \nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './components/GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GiftExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}